/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as LicenseImport } from './routes/license'
import { Route as CabinetsImport } from './routes/cabinets'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as WikiIndexImport } from './routes/wiki/index'
import { Route as DriversIndexImport } from './routes/drivers/index'
import { Route as CabinetsIndexImport } from './routes/cabinets/index'
import { Route as WikiIdIndexImport } from './routes/wiki/$id.index'
import { Route as DriversIdIndexImport } from './routes/drivers/$id.index'
import { Route as CabinetsIdIndexImport } from './routes/cabinets/$id.index'
import { Route as WikiIdEditImport } from './routes/wiki/$id.edit'
import { Route as DriversIdEditImport } from './routes/drivers/$id.edit'
import { Route as CabinetsIdEditImport } from './routes/cabinets/$id.edit'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const LicenseRoute = LicenseImport.update({
  id: '/license',
  path: '/license',
  getParentRoute: () => rootRoute,
} as any)

const CabinetsRoute = CabinetsImport.update({
  id: '/cabinets',
  path: '/cabinets',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WikiIndexRoute = WikiIndexImport.update({
  id: '/wiki/',
  path: '/wiki/',
  getParentRoute: () => rootRoute,
} as any)

const DriversIndexRoute = DriversIndexImport.update({
  id: '/drivers/',
  path: '/drivers/',
  getParentRoute: () => rootRoute,
} as any)

const CabinetsIndexRoute = CabinetsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CabinetsRoute,
} as any)

const WikiIdIndexRoute = WikiIdIndexImport.update({
  id: '/wiki/$id/',
  path: '/wiki/$id/',
  getParentRoute: () => rootRoute,
} as any)

const DriversIdIndexRoute = DriversIdIndexImport.update({
  id: '/drivers/$id/',
  path: '/drivers/$id/',
  getParentRoute: () => rootRoute,
} as any)

const CabinetsIdIndexRoute = CabinetsIdIndexImport.update({
  id: '/$id/',
  path: '/$id/',
  getParentRoute: () => CabinetsRoute,
} as any)

const WikiIdEditRoute = WikiIdEditImport.update({
  id: '/wiki/$id/edit',
  path: '/wiki/$id/edit',
  getParentRoute: () => rootRoute,
} as any)

const DriversIdEditRoute = DriversIdEditImport.update({
  id: '/drivers/$id/edit',
  path: '/drivers/$id/edit',
  getParentRoute: () => rootRoute,
} as any)

const CabinetsIdEditRoute = CabinetsIdEditImport.update({
  id: '/$id/edit',
  path: '/$id/edit',
  getParentRoute: () => CabinetsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/cabinets': {
      id: '/cabinets'
      path: '/cabinets'
      fullPath: '/cabinets'
      preLoaderRoute: typeof CabinetsImport
      parentRoute: typeof rootRoute
    }
    '/license': {
      id: '/license'
      path: '/license'
      fullPath: '/license'
      preLoaderRoute: typeof LicenseImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/cabinets/': {
      id: '/cabinets/'
      path: '/'
      fullPath: '/cabinets/'
      preLoaderRoute: typeof CabinetsIndexImport
      parentRoute: typeof CabinetsImport
    }
    '/drivers/': {
      id: '/drivers/'
      path: '/drivers'
      fullPath: '/drivers'
      preLoaderRoute: typeof DriversIndexImport
      parentRoute: typeof rootRoute
    }
    '/wiki/': {
      id: '/wiki/'
      path: '/wiki'
      fullPath: '/wiki'
      preLoaderRoute: typeof WikiIndexImport
      parentRoute: typeof rootRoute
    }
    '/cabinets/$id/edit': {
      id: '/cabinets/$id/edit'
      path: '/$id/edit'
      fullPath: '/cabinets/$id/edit'
      preLoaderRoute: typeof CabinetsIdEditImport
      parentRoute: typeof CabinetsImport
    }
    '/drivers/$id/edit': {
      id: '/drivers/$id/edit'
      path: '/drivers/$id/edit'
      fullPath: '/drivers/$id/edit'
      preLoaderRoute: typeof DriversIdEditImport
      parentRoute: typeof rootRoute
    }
    '/wiki/$id/edit': {
      id: '/wiki/$id/edit'
      path: '/wiki/$id/edit'
      fullPath: '/wiki/$id/edit'
      preLoaderRoute: typeof WikiIdEditImport
      parentRoute: typeof rootRoute
    }
    '/cabinets/$id/': {
      id: '/cabinets/$id/'
      path: '/$id'
      fullPath: '/cabinets/$id'
      preLoaderRoute: typeof CabinetsIdIndexImport
      parentRoute: typeof CabinetsImport
    }
    '/drivers/$id/': {
      id: '/drivers/$id/'
      path: '/drivers/$id'
      fullPath: '/drivers/$id'
      preLoaderRoute: typeof DriversIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/wiki/$id/': {
      id: '/wiki/$id/'
      path: '/wiki/$id'
      fullPath: '/wiki/$id'
      preLoaderRoute: typeof WikiIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface CabinetsRouteChildren {
  CabinetsIndexRoute: typeof CabinetsIndexRoute
  CabinetsIdEditRoute: typeof CabinetsIdEditRoute
  CabinetsIdIndexRoute: typeof CabinetsIdIndexRoute
}

const CabinetsRouteChildren: CabinetsRouteChildren = {
  CabinetsIndexRoute: CabinetsIndexRoute,
  CabinetsIdEditRoute: CabinetsIdEditRoute,
  CabinetsIdIndexRoute: CabinetsIdIndexRoute,
}

const CabinetsRouteWithChildren = CabinetsRoute._addFileChildren(
  CabinetsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/cabinets': typeof CabinetsRouteWithChildren
  '/license': typeof LicenseRoute
  '/login': typeof LoginRoute
  '/cabinets/': typeof CabinetsIndexRoute
  '/drivers': typeof DriversIndexRoute
  '/wiki': typeof WikiIndexRoute
  '/cabinets/$id/edit': typeof CabinetsIdEditRoute
  '/drivers/$id/edit': typeof DriversIdEditRoute
  '/wiki/$id/edit': typeof WikiIdEditRoute
  '/cabinets/$id': typeof CabinetsIdIndexRoute
  '/drivers/$id': typeof DriversIdIndexRoute
  '/wiki/$id': typeof WikiIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/license': typeof LicenseRoute
  '/login': typeof LoginRoute
  '/cabinets': typeof CabinetsIndexRoute
  '/drivers': typeof DriversIndexRoute
  '/wiki': typeof WikiIndexRoute
  '/cabinets/$id/edit': typeof CabinetsIdEditRoute
  '/drivers/$id/edit': typeof DriversIdEditRoute
  '/wiki/$id/edit': typeof WikiIdEditRoute
  '/cabinets/$id': typeof CabinetsIdIndexRoute
  '/drivers/$id': typeof DriversIdIndexRoute
  '/wiki/$id': typeof WikiIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/cabinets': typeof CabinetsRouteWithChildren
  '/license': typeof LicenseRoute
  '/login': typeof LoginRoute
  '/cabinets/': typeof CabinetsIndexRoute
  '/drivers/': typeof DriversIndexRoute
  '/wiki/': typeof WikiIndexRoute
  '/cabinets/$id/edit': typeof CabinetsIdEditRoute
  '/drivers/$id/edit': typeof DriversIdEditRoute
  '/wiki/$id/edit': typeof WikiIdEditRoute
  '/cabinets/$id/': typeof CabinetsIdIndexRoute
  '/drivers/$id/': typeof DriversIdIndexRoute
  '/wiki/$id/': typeof WikiIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/cabinets'
    | '/license'
    | '/login'
    | '/cabinets/'
    | '/drivers'
    | '/wiki'
    | '/cabinets/$id/edit'
    | '/drivers/$id/edit'
    | '/wiki/$id/edit'
    | '/cabinets/$id'
    | '/drivers/$id'
    | '/wiki/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/license'
    | '/login'
    | '/cabinets'
    | '/drivers'
    | '/wiki'
    | '/cabinets/$id/edit'
    | '/drivers/$id/edit'
    | '/wiki/$id/edit'
    | '/cabinets/$id'
    | '/drivers/$id'
    | '/wiki/$id'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/cabinets'
    | '/license'
    | '/login'
    | '/cabinets/'
    | '/drivers/'
    | '/wiki/'
    | '/cabinets/$id/edit'
    | '/drivers/$id/edit'
    | '/wiki/$id/edit'
    | '/cabinets/$id/'
    | '/drivers/$id/'
    | '/wiki/$id/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  CabinetsRoute: typeof CabinetsRouteWithChildren
  LicenseRoute: typeof LicenseRoute
  LoginRoute: typeof LoginRoute
  DriversIndexRoute: typeof DriversIndexRoute
  WikiIndexRoute: typeof WikiIndexRoute
  DriversIdEditRoute: typeof DriversIdEditRoute
  WikiIdEditRoute: typeof WikiIdEditRoute
  DriversIdIndexRoute: typeof DriversIdIndexRoute
  WikiIdIndexRoute: typeof WikiIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  CabinetsRoute: CabinetsRouteWithChildren,
  LicenseRoute: LicenseRoute,
  LoginRoute: LoginRoute,
  DriversIndexRoute: DriversIndexRoute,
  WikiIndexRoute: WikiIndexRoute,
  DriversIdEditRoute: DriversIdEditRoute,
  WikiIdEditRoute: WikiIdEditRoute,
  DriversIdIndexRoute: DriversIdIndexRoute,
  WikiIdIndexRoute: WikiIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/cabinets",
        "/license",
        "/login",
        "/drivers/",
        "/wiki/",
        "/drivers/$id/edit",
        "/wiki/$id/edit",
        "/drivers/$id/",
        "/wiki/$id/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/cabinets": {
      "filePath": "cabinets.tsx",
      "children": [
        "/cabinets/",
        "/cabinets/$id/edit",
        "/cabinets/$id/"
      ]
    },
    "/license": {
      "filePath": "license.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/cabinets/": {
      "filePath": "cabinets/index.tsx",
      "parent": "/cabinets"
    },
    "/drivers/": {
      "filePath": "drivers/index.tsx"
    },
    "/wiki/": {
      "filePath": "wiki/index.tsx"
    },
    "/cabinets/$id/edit": {
      "filePath": "cabinets/$id.edit.tsx",
      "parent": "/cabinets"
    },
    "/drivers/$id/edit": {
      "filePath": "drivers/$id.edit.tsx"
    },
    "/wiki/$id/edit": {
      "filePath": "wiki/$id.edit.tsx"
    },
    "/cabinets/$id/": {
      "filePath": "cabinets/$id.index.tsx",
      "parent": "/cabinets"
    },
    "/drivers/$id/": {
      "filePath": "drivers/$id.index.tsx"
    },
    "/wiki/$id/": {
      "filePath": "wiki/$id.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
